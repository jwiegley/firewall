#!/usr/bin/env python

import sys
import re
import os
import time
import gzip
import socket

from stat import *
from datetime import datetime

# Example: Jun  9 20:51:08 Hermes kernel[0]: \
#   ipfw: 30000 Reject UDP 71.214.49.85:1194 142.151.132.254:51238 in via en0
pattern = re.compile("(\\w+\\s+\\d+ \\d+:\\d+:\\d+) (\\w+) kernel\\[\\d+\\]:" +
                     " ipfw: (\\d+) (Reject|Deny|Accept|Unreach [0-9]+|Reset) ([A-Z0-9.:]+) " +
                     "([0-9.]+)(:(\\d+))? ([0-9.]+)(:(\\d+))? (in|out) via (\\w+\\d+)")

class Report:
    timestamp = None
    hostname  = None
    rulenum   = None
    action    = None
    protocol  = None
    source    = None
    src_port  = None
    dest      = None
    dest_port = None
    direction = None
    interface = None

    def __init__(self):
        pass

    def __repr__(self):
        return "%s%s%s%s%s%s%s%s%s%s" % \
            (self.hostname, self.rulenum, self.action, self.protocol,
             self.source, self.src_port, self.dest, self.dest_port,
             self.direction, self.interface)

def include_report(report):
    if report.interface == "en2" or \
       report.interface == "en3":
        return False

    if report.protocol == "UDP" and \
       report.dest == "224.0.0.252":
        return False

    if report.protocol == "UDP" and \
       report.dest == "255.255.255.255" and \
       report.dest_port == "67":
        return False

    return True

reports  = {}
read_all = len(sys.argv) > 1 and sys.argv[1] == "-a"

def read_logs(basepath):
    if not os.path.exists(basepath):
        return

    for file in os.popen("ls -1 %s*" % basepath):
        if re.search('\.gz$', file):
            fd = gzip.open(file[:-1], "r")
        else:
            fd = open(file[:-1], "r")

        print "Reading", file[:-1]

        for line in fd:
            match = pattern.match(line)
            if match:
                report = Report()

                report.timestamp = \
                  datetime(*(time.strptime(match.group(1), "%b %d %H:%M:%S")[0:7])) \
                    .replace(datetime.now().year)
                report.hostname  = match.group(2)
                report.rulenum   = match.group(3)
                report.action    = re.sub('Unreach', 'Unr', match.group(4))
                report.protocol  = match.group(5)
                report.source    = match.group(6)
                report.src_port  = match.group(8)
                report.dest      = match.group(9)
                report.dest_port = match.group(11)
                report.direction = match.group(12)
                report.interface = match.group(13)

                if not include_report(report):
                    continue

                source = report.source
                if report.direction == "in":
                    source = report.dest

                if not reports.has_key(source):
                    reports[source] = [report]
                else:
                    reports[source].append(report)

        fd.close()
        if not read_all: break

def timestr(secs):
    if secs < 3600:
        return "%5.1fm" % (float(secs) / 60.0)
    elif secs < 86400:
        return "%5.1fh" % (float(secs) / 3600.0)
    else:
        return "%5.1fd" % (float(secs) / 86400.0)

def addrstr(addr):
    return addr
    #try:
    #    info = socket.gethostbyaddr(addr)
    #    if info:
    #        return info[0]
    #    else:
    #        return addr
    #except socket.herror:
    #    return addr
    #
    #match = re.match("([0-9]+)\\.([0-9]+)\\.([0-9]+)\\.([0-9]+)", addr)
    #assert match
    #return "%3d.%3d.%3d.%3d" % (int(match.group(1)), int(match.group(2)),
    #                            int(match.group(3)), int(match.group(4)))

def show_reports(reports):
    hits          = []
    showed_banner = False

    for source in reports.keys():
        report_list = reports[source]
        report      = report_list[-1]

        saw_dir = ""
        for rep in report_list:
            if not saw_dir:
                saw_dir = rep.direction
            elif saw_dir != rep.direction:
                saw_dir = "both"
                report.saw_dir = "both"
                break

        delta   = datetime.now() - report.timestamp
        seconds = (delta.days * 86400.0) + delta.seconds

        hits.append((seconds, report, len(report_list)))

    hits.sort(lambda x, y: int(x[0]) - int(y[0]))

    for seconds, report, count in hits:
        if report.direction == "out":
            arrow     = "->"
            leftaddr  = report.source
            leftport  = report.src_port
            rightaddr = report.dest
            rightport = report.dest_port
        else:
            arrow     = "<-"
            leftaddr  = report.dest
            leftport  = report.dest_port
            rightaddr = report.source
            rightport = report.src_port

        if report.__dict__.has_key('saw_dir') and report.saw_dir == "both":
            arrow = "<>"

        lport = leftport
        if lport is None:
            lport = ""
        rport = rightport
        if rport is None:
            rport = ""

        if not showed_banner:
            print
            print "%6s %9s %5s %-6s %-8s %15s %5s %2s %15s %5s  %s" % \
                ('ago', 'count', 'rule', 'reply', 'proto', 'local', 'port', 'dr',
                 'remote', 'port', 'intf')
            print "%6s %9s %5s %-6s %-8s %15s %5s %2s %15s %5s  %s" % \
                ('-----', '---------', '-----', '------', '--------',
                 '---------------', '-----', '--',
                 '---------------', '-----', '----')
            showed_banner = True

        print "%s %9d %5s %-6s %-8s %15s %5s %s %15s %5s  %s" % \
            (timestr(seconds), count, report.rulenum,
             report.action, report.protocol, leftaddr, lport,
             arrow, rightaddr, rport, report.interface)

#read_logs("/var/log/ipfw.log")
read_logs("/var/log/system.log")
show_reports(reports)
